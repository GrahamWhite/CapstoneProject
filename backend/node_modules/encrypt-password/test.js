const { expect } = require('chai')
const { createHash, createHmac } = require('crypto')
const encryptPassword = require('./')

describe('Output verification', () => {
  const options = {
    secret: 'secret',
    signature: 'signature',
  }
  let encryptedOne, encryptedTwo

  // Encrypt without secret keys
  encryptedOne = encryptPassword('password')
  encryptedTwo = createHash('sha256')
    .update(
      createHash('sha256')
        .update('password')
        .digest('base64')
    )
    .digest('base64')

  expect(encryptedOne).to.equal(encryptedTwo)

  // Encrypt with secret keys
  encryptedOne = encryptPassword('password', options)
  encryptedTwo = createHmac('sha256', options.secret)
    .update(
      createHmac('sha256', options.signature)
        .update('password')
        .digest('base64')
    )
    .digest('base64')

  expect(encryptedOne).to.equal(encryptedTwo)
})

describe('Default configurations', () => {
  const defaults = { min: 6, max: 32 }
  encryptPassword('password')
  expect(global.ENCRYPT_PASSWORD_CONFIGS).to.deep.equal(defaults)
})

describe('Global configurations', () => {
  const configs = {
    secret: 'global secret',
    signature: 'global signature',
    min: 0,
    max: 256,
    pattern: /^.*$/,
  }

  encryptPassword.secret = configs.secret
  encryptPassword.signature = configs.signature
  encryptPassword.min = configs.min
  encryptPassword.max = configs.max
  encryptPassword.pattern = configs.pattern

  encryptPassword('password')
  expect(global.ENCRYPT_PASSWORD_CONFIGS).to.deep.equal(configs)
})

describe('Separate configurations', () => {
  const options = {
    secret: 'separate secret',
    signature: 'separate signature',
    min: 4,
    max: 16,
    pattern: /^.{4,16}$/,
  }

  encryptPassword('password', options)
  expect(global.ENCRYPT_PASSWORD_CONFIGS).to.deep.equal(options)
})
