const { createHash, createHmac } = require('crypto')
const debug = process.env.NODE_ENV === 'test'
const ALGORITHM = 'sha256'
const OUTPUT_FORMAT = 'base64'

/**
 * Encrypt password before beging saved to the database.
 * @param {string} password
 * @param {(string|Object)} [options] It represents `signature` when it's a string.
 * @param {string} [options.secret] The unified secret key.
 * @param {string} [options.signature] Generated according to the different users.
 * @param {number} [options.min] The minimum length of the password.
 * @param {number} [options.max] The maximum length of the password.
 * @param {RegExp} [options.pattern] The format of the password.
 * @returns {string} An encrypted string.
 * @throws {Error}
 * @see https://github.com/LeeWeisheng/encrypt-password#usage
 */
function EncryptPassword (password, options) {
  if (!password) {
    throw new Error('Password required')
  }

  if (typeof password !== 'string') {
    throw new Error('Password must be a string')
  }

  const passwordLength = password.length
  const configs = Object.assign({}, EncryptPassword)

  if (options) {
    if (options.constructor === Object) {
      Object.assign(configs, options)
    } else if (typeof options === 'string') {
      configs.signature = options
    }
  }

  if (debug) {
    global.ENCRYPT_PASSWORD_CONFIGS = configs
  }

  const { secret, signature, min, max, pattern } = configs

  if (secret && typeof secret !== 'string') {
    throw new Error('Secret must be a string')
  }

  if (signature && typeof signature !== 'string') {
    throw new Error('Signature must be a string')
  }

  if (typeof min === 'number') {
    if (!Number.isSafeInteger(min)) {
      throw new Error('Min must be a safe integer')
    }
    if (passwordLength < min) {
      throw new Error(`The length of the password must be greater than or equal to ${min}`)
    }
  }

  if (typeof max === 'number') {
    if (!Number.isSafeInteger(max)) {
      throw new Error('Max must be a sage integer')
    }
    if (passwordLength > max) {
      throw new Error(`The length of the password must be less than or equal to ${max}`)
    }
  }

  if (pattern) {
    if (pattern.constructor !== RegExp) {
      throw new Error('Pattern must be a regular expression')
    }
    if (!pattern.test(password)) {
      throw new Error('Incorrect password format')
    }
  }

  const stageOneProcessor = signature ? createHmac(ALGORITHM, signature) : createHash(ALGORITHM)
  const stageOneOutput = stageOneProcessor.update(password).digest(OUTPUT_FORMAT)
  const stageTwoProcessor = secret ? createHmac(ALGORITHM, secret) : createHash(ALGORITHM)
  const stageTwoOutput = stageTwoProcessor.update(stageOneOutput).digest(OUTPUT_FORMAT)

  return stageTwoOutput
}

EncryptPassword.min = 6
EncryptPassword.max = 32

module.exports = EncryptPassword
